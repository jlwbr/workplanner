// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Planning {
  id        String   @id @default(cuid())
  date      DateTime
  channelId String
  locked    Boolean  @default(false)

  channel      Channel        @relation(fields: [channelId], references: [id])
  PlanningItem PlanningItem[]

  @@unique([id, date, channelId])
}

model Communication {
  id          String   @id @default(cuid())
  date        DateTime
  userId      String
  phoneNumber String
  HT          Boolean

  user User @relation(fields: [userId], references: [id])
  @@unique([userId, date])
}

model Break {
  id     String   @id @default(cuid())
  date   DateTime
  userId String
  number Int

  user User @relation(fields: [userId], references: [id])
  @@unique([userId, date])
}

model Schedule {
  id       String   @id @default(cuid())
  userId   String
  date     DateTime
  schedule String

  user User @relation(fields: [userId], references: [id])
  @@unique([userId, date])
}

model PlanningItem {
  id               String  @id @default(cuid())
  planningId       String
  planningRuleId   String?
  name             String
  description      String  @db.LongText
  minMorning       Int     @default(0)
  minAfternoon     Int     @default(0)
  minEvening       Int     @default(0)
  maxMorning       Int     @default(0)
  maxAfternoon     Int     @default(0)
  maxEvening       Int     @default(0)
  morningAsignee   User[]  @relation(name: "PlanningItem_morningAsignee")
  afternoonAsignee User[]  @relation(name: "PlanningItem_afternoonAsignee")
  eveningAsignee   User[]  @relation(name: "PlanningItem_eveningAsignee")
  AssigneeText     Json?
  hasMorning       Boolean @default(true)
  hasAfternoon     Boolean @default(true)
  hasEvening       Boolean @default(true)
  ownerId          String?
  done             Boolean @default(false)
  doneUserId       String?

  owner        User?         @relation(fields: [ownerId], references: [id], name: "PlanningItem_owner")
  doneUser     User?         @relation(fields: [doneUserId], references: [id], name: "PlanningItem_doneUser")
  Planning     Planning      @relation(fields: [planningId], references: [id])
  PlanningRule PlanningRule? @relation(fields: [planningRuleId], references: [id])
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
  subTask      subTask[]
}

model PlanningRule {
  id           String  @id @default(cuid())
  name         String
  description  String  @db.LongText
  rule         String
  channelId    String
  minMorning   Int     @default(0)
  minAfternoon Int     @default(0)
  minEvening   Int     @default(0)
  maxMorning   Int     @default(0)
  maxAfternoon Int     @default(0)
  maxEvening   Int     @default(0)
  hasMorning   Boolean @default(true)
  hasAfternoon Boolean @default(true)
  hasEvening   Boolean @default(true)
  order        Int     @default(0)

  channel      Channel        @relation(fields: [channelId], references: [id])
  PlanningItem PlanningItem[]
  subTask      subTask[]
}

model subTask {
  id             String  @id @default(cuid())
  name           String
  done           Boolean @default(false)
  doneUserId     String?
  planningItemId String?
  planningRuleId String?

  doneUser     User?         @relation(fields: [doneUserId], references: [id])
  planningItem PlanningItem? @relation(fields: [planningItemId], references: [id])
  planningRule PlanningRule? @relation(fields: [planningRuleId], references: [id])
}

model Channel {
  id           String         @id @default(cuid())
  name         String         @unique
  sort         Int            @default(0)
  removed      Boolean        @default(false)
  canAdd       Boolean        @default(false)
  members      User[]
  PlanningRule PlanningRule[]
  Planning     Planning[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  admin                Boolean         @default(false)
  editor               Boolean         @default(false)
  shared               Boolean         @default(false)
  defaultPhoneNumber   String?
  defaultHT            Boolean?
  defaultBreak         Int?
  accounts             Account[]
  sessions             Session[]
  channels             Channel[]
  MorningAsignee       PlanningItem[]  @relation(name: "PlanningItem_morningAsignee")
  AfternoonAsignee     PlanningItem[]  @relation(name: "PlanningItem_afternoonAsignee")
  EveningAsignee       PlanningItem[]  @relation(name: "PlanningItem_eveningAsignee")
  PlanningItem         PlanningItem[]
  Communication        Communication[]
  Break                Break[]
  PlanningItemOwner    PlanningItem[]  @relation(name: "PlanningItem_owner")
  PlanningItemDoneUser PlanningItem[]  @relation(name: "PlanningItem_doneUser")
  subTask              subTask[]
  Schedule             Schedule[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
